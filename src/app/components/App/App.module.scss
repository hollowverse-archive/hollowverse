@import 'variables.scss';
@import 'mixins.scss';
@import-normalize;

// stylelint-disable property-blacklist
:global {
  //#region Theme
  :root {
    @include define-theme-variable(
      --color-facebook-blue,
      hsl(220, 46%, 48%),
      hsl(220, 46%, 75%)
    );

    @include define-theme-variable(
      --color-text-default,
      hsl(0, 0%, 20%),
      hsl(0, 0%, 95%)
    );

    @include define-theme-variable(
      --color-text-link,
      hsl(248, 100%, 31%),
      hsl(32, 100%, 66%)
    );

    @include define-theme-variable(
      --color-text-link-hover,
      hsl(248, 100%, 75%),
      hsl(59, 100%, 95%)
    );

    @include define-theme-variable(
      --color-text-light,
      hsl(0, 0%, 24%),
      hsl(0, 3%, 90%)
    );

    @include define-theme-variable(
      --color-text-lighter,
      hsl(0, 0%, 35%),
      hsl(0, 0%, 85%)
    );

    @include define-theme-variable(
      --color-background,
      hsl(240, 3%, 88%),
      hsl(0, 0%, 10%)
    );

    @include define-theme-variable(
      --color-background-light,
      hsl(240, 8%, 95%),
      hsl(0, 0%, 15%)
    );

    @include define-theme-variable(
      --color-paper,
      hsl(180, 100%, 100%),
      hsl(0, 0%, 5%)
    );

    @include define-theme-variable(
      --color-border,
      hsl(0, 0%, 85%),
      hsl(0, 0%, 25%)
    );

    @include define-theme-variable(
      --color-shadow,
      hsl(0, 0%, 70%),
      hsl(0, 0%, 80%)
    );

    @include define-theme-variable(
      --color-menu-item-hover,
      hsl(201, 81%, 96%),
      hsl(0, 0%, 21%)
    );

    --color-control-active: hsl(203, 89%, 53%);
    --color-control-active-background: hsl(201, 91%, 71%);

    --color-toggle-off-background: hsl(0, 0%, 38%);
    --color-toggle-off-knob: var(--color-background-light);
    --color-toggle-on-background: var(--color-control-active-background);
    --color-toggle-on-knob: var(--color-control-active);
  }
  //#endregion Theme

  *,
  *::after,
  *::before {
    border: 0;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }

  html {
    width: 100%;
    min-height: 100vh;
  }

  body {
    width: 100%;
    min-height: 100%;
    min-width: 320px;
    position: relative;
    color: var(--color-text-default);
    background-color: var(--color-background-light);
    font-family: $font-family;
  }

  input,
  button,
  textarea {
    font-family: $font-family;
  }

  input,
  textarea {
    background: var(--color-paper);
    color: var(--color-text-default);
  }

  a {
    text-decoration-skip-ink: auto;
    transition: color 0.2s ease-in-out;
    color: var(--color-text-link);
  }

  /**
   * Visible on screen readers only
   * @see https://accessibility.18f.gov/hidden-content/
   */
  .sr-only {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }

  input[type='text'],
  input[type='search'],
  // The `focus-visible` package provides the classes `.js-focus-visible`
  // and `.focus-visible`.
  // It is used to disable the "focus ring" style around buttons and links
  // when interacting with the page using the mouse, but still keep it
  // when using the keyboard for accessibility purposes.
  // The class is a polyfill for the `:focus-visible` pseudo-selector which
  // is still a proposal.
  .js-focus-visible :focus:not(.focus-visible) {
    outline: none;
  }

  // #region Disable page auto-zoom when a text input is focused on Safari for iOS
  input {
    font-size: inherit !important;
  }
  // #endregion Disable page auto-zoom when a text input is focused on Safari for iOS

  // #region Disable rounded corners of search fields on Safari for iOS
  input[type='search'] {
    appearance: none;
  }
  // #endregion Disable rounded corners of search fields on Safari for iOS

  // #region Override certain normalize.css styles
  h1 {
    margin: 0;
  }
  // #endregion Override certain normalize.css styles
}
// stylelint-enable property-blacklist

.root {
  width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;

  .view {
    width: 100%;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    > * {
      flex-grow: 1;
    }
  }
}
